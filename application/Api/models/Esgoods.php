<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Esgoods * * @author zhongyg */class EsgoodsModel extends PublicModel {    //put your code here    protected $tableName = 'goods';    protected $dbName = 'erui_goods'; //数据库名称    public function __construct($str = '') {        parent::__construct($str = '');    }    /* 条件组合     * @param mix $condition // 搜索条件     */    /* 条件组合     * @param mix $condition // 搜索条件     */    private function getCondition($condition) {        $body = [];        $name = $sku = $spu = $show_cat_no = $status = $show_name = $attrs = '';        if (isset($condition['sku']) && $condition['sku']) {            $sku = $condition['sku'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['sku' => $sku]];        }        if (isset($condition['spu']) && $condition['spu']) {            $spu = $condition['spu'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['spu' => $spu]];        }        if (isset($condition['skus']) && $condition['skus']) {            $skus = $condition['skus'];            $skus_arr = [];            foreach ($skus as $sku) {                $skus_arr[] = [ESClient::MATCH_PHRASE => ['sku' => $sku]];            }            $body['query']['bool']['must'][] = ['bool' => [ESClient::SHOULD => $skus_arr]];        }        if (isset($condition['show_cat_no']) && $condition['show_cat_no']) {            $show_cat_no = $condition['show_cat_no'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_cats' => $show_cat_no]];        }        if (isset($condition['mcat_no1'])) {            $mcat_no1 = $condition['mcat_no1'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no1]];        }        if (isset($condition['mcat_no2'])) {            $mcat_no2 = $condition['mcat_no2'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no2]];        }        if (isset($condition['mcat_no3'])) {            $mcat_no3 = $condition['mcat_no3'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no3]];        }        if (isset($condition['name']) && $condition['name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['name']) && $condition['name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['show_name']) && $condition['show_name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['real_name']) && $condition['real_name']) {            $real_name = $condition['real_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['name' => $real_name]];        }        if (isset($condition['supplier_name']) && $condition['supplier_name']) {            $supplier_name = $condition['supplier_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['supplier_name' => $supplier_name]];        }        if (isset($condition['brand']) && $condition['brand']) {            $brand = $condition['brand'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['brand' => $brand]];        }        if (isset($condition['source']) && $condition['source']) {            $source = $condition['source'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['source' => $source]];        }        if (isset($condition['cat_name']) && $condition['cat_name']) {            $cat_name = $condition['cat_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_cats' => $cat_name]];        }        if (isset($condition['created_at_start']) && isset($condition['created_at_end']) && $condition['created_at_start'] && $condition['created_at_end']) {            $created_at_start = $condition['created_at_start'];            $created_at_end = $condition['created_at_end'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gte' => $created_at_start,                        'gle' => $created_at_end,                    ]                ]            ];        } elseif (isset($condition['created_at_start']) && $condition['created_at_start']) {            $created_at_start = $condition['created_at_start'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gte' => $created_at_start,                    ]                ]            ];        } elseif (isset($condition['created_at_end']) && $condition['created_at_end']) {            $created_at_end = $condition['created_at_end'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gle' => $created_at_end,                    ]                ]            ];        }        if (isset($condition['status'])) {            $status = $condition['status'];            if (!in_array($status, ['NORMAL', 'VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {                $status = 'VALID';            }            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['status' => $status]];        } else {            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['status' => 'VALID']];        }        if (isset($condition['model']) && $condition['model']) {            $model = $condition['model'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['model' => $model]];        }        if (isset($condition['created_by']) && $condition['created_by']) {            $created_by = $condition['created_by'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['created_by' => $created_by]];        }        if (isset($condition['keyword'])) {            $show_name = $condition['keyword'];            $body['query']['bool']['must'][] = [ESClient::MULTI_MATCH => [                    'query' => $show_name,                    'type' => 'most_fields',                    'fields' => ['show_name', 'attrs', 'specs', 'spu', 'source', 'brand', 'skus']            ]];        }        return $body;    }    /* 通过搜索条件获取数据列表     * @param mix $condition // 搜索条件     * @param string $lang // 语言     * @return mix     */    public function getgoods($condition, $_source = null, $lang = 'en') {        try {            if (!$_source) {                $_source = ['sku', 'spu', 'name', 'show_name', 'model'                    , 'purchase_price1', 'purchase_price2', 'attachs', 'package_quantity', 'exw_day',                    'purchase_price_cur', 'purchase_unit', 'pricing_flag', 'show_cats',                    'meterial_cat', 'brand', 'supplier_name', 'warranty'];            }            $body = $this->getCondition($condition);            $pagesize = 10;            $current_no = 1;            if (isset($condition['current_no'])) {                $current_no = intval($condition['current_no']) > 0 ? intval($condition['current_no']) : 1;            }            if (isset($condition['pagesize'])) {                $pagesize = intval($condition['pagesize']) > 0 ? intval($condition['pagesize']) : 10;            }            $from = ($current_no - 1) * $pagesize;            $es = new ESClient();            return [$es->setbody($body)                        ->setfields($_source)                        ->setsort('sort_order', 'desc')                        ->setsort('_score', 'desc')                        ->search($this->dbName, $this->tableName . '_' . $lang, $from, $pagesize), $from, $pagesize];        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过搜索条件获取数据列表     * @param mix $condition // 搜索条件     * @param string $lang // 语言     * @return mix     */    public function getshow_catlist($condition, $lang = 'en') {        try {            $body = $this->getCondition($condition);            $from = ($current_no - 1) * $pagesize;            $es = new ESClient();            return $es->setbody($body)                            ->setaggs('show_cats', 'chowcat', 'terms')                            ->search($this->dbName, $this->tableName . '_' . $lang, $from);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过ES 获取数据列表     * @param string $name // 商品名称 属性名称或属性值     * @param string $show_cat_no // 展示分类编码     * @return mix     */    public function getGoodsbysku($sku, $lang = 'en') {        try {            $es = new ESClient();            $es->setmust(['sku' => $sku], ESClient::TERM);            return $es->search($this->dbName, $this->tableName . '_' . $lang);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过ES 获取数据列表     * @param string $name // 商品名称 属性名称或属性值     * @param string $show_cat_no // 展示分类编码     * @return mix     */    public function getGoodsbyspu($sku, $lang = 'en') {        try {            $es = new ESClient();            $es->setmust(['sku' => $sku], ESClient::TERM);            return $es->search($this->dbName, $this->tableName . '_' . $lang);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品属性列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_attrbyskus($skus, $lang = 'en') {        try {            $product_attrs = $this->table('erui_goods.t_goods_attr')                    ->field('*')                    ->where(['sku' => ['in', $skus], 'spec_flag' => 'N', 'lang' => $lang, 'status' => 'VALID'])                    ->select();            $ret = [];            foreach ($product_attrs as $item) {                $sku = $item['sku'];                unset($item['sku']);                $ret[$sku][] = $item;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品文件列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_attachsbyskus($skus, $lang = 'en') {        try {            $goods_attachs = $this->table('erui_goods.t_goods_attach')                    ->field('id,attach_type,attach_url,attach_name,attach_url,sku')                    ->where(['sku' => ['in', $skus],                        'attach_type' => ['in', ['BIG_IMAGE', 'MIDDLE_IMAGE', 'SMALL_IMAGE', 'DOC']],                        'status' => 'VALID'])                    ->select();            $ret = [];            if ($goods_attachs) {                foreach ($goods_attachs as $item) {                    $data['attach_name'] = $item['attach_name'];                    $data['attach_url'] = $item['attach_url'];                    $ret[$item['sku']][$item['attach_type']][] = $data;                }            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品规格列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_specsbyskus($skus, $lang = 'en') {        try {            $product_attrs = $this->table('erui_goods.t_goods_attr')                    ->field('sku,attr_name,attr_value,attr_no')                    ->where(['sku' => ['in', $skus],                        'lang' => $lang,                        'spec_flag' => 'Y',                        'status' => 'VALID'                    ])                    ->select();            $ret = [];            foreach ($product_attrs as $item) {                $sku = $item['sku'];                unset($item['sku']);                $ret[$sku][] = $item;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品产品属性分类等信息列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getproductattrsbyspus($skus, $lang = 'en') {        try {            $goodss = $this->where(['sku' => ['in', $skus], 'lang' => $lang])                    ->select();            $spus = $skus = [];            foreach ($goodss as $item) {                $skus[] = $item['sku'];                $spus[] = $item['spu'];            }            $spus = array_unique($spus);            $skus = array_unique($skus);            $espoducmodel = new EsproductModel();            $productattrs = $espoducmodel->getproductattrsbyspus($spus, $lang);            $goods_attrs = $this->getgoods_attrbyskus($spus, $lang);            $specs = $this->getgoods_specsbyskus($skus, $lang);            $ret = [];            foreach ($goodss as $item) {                $id = $item['id'];                $body = $item;                $body['meterial_cat'] = $productattrs[$item['spu']]['meterial_cat'];                $body['show_cat'] = $productattrs[$item['spu']]['show_cats'];                $body['specs'] = $specs[$item['sku']];                $product_attrs = json_decode($productattrs[$item['spu']]['attrs'], true);                foreach ($goods_attrs[$item['sku']] as $attr) {                    array_push($product_attrs, $attr);                }                $body['attrs'] = json_encode($product_attrs, JSON_UNESCAPED_UNICODE);                // $body['specs'] = json_encode($specs, JSON_UNESCAPED_UNICODE);                $ret[$id] = $body;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /*     * 将数组中的null值转换为空值     * @author zyg 2017-07-31     * @param array $item // 语言 zh en ru es     * @return mix     */    private function _findnulltoempty(&$item) {        foreach ($item as $key => $val) {            if (is_null($val)) {                $item[$key] = '';            }        }    }    public function importgoodsattr($lang = 'en') {        $goods_attr_model = new NewAttrModel();        // $count = $goods_attr_model->where(['lang' => $lang, 'created_at' => '2017-08-15 00:00:00'])->count('id');        echo $goods_attr_model->_sql();//        for ($i = 0; $i < $count; $i += 100) {//            if ($i > $count) {//                $i = $count;//            }        echo $i, PHP_EOL;//            $goods = $goods_attr_model->field('id,sku,spu')//                    ->where(['lang' => $lang, 'created_at' => '2017-08-15 00:00:00'])//                    ->limit($i, 100)//                    ->group('sku')//                    ->select();////            $spus = $skus = [];////            if ($goods) {//                foreach ($goods as $item) {//                    $skus[] = $item['sku'];//                    //   $spus[] = $item['spu'];//                }//            } else {//                return false;//            }        $skus = ['2113020000100001', '2113020000100002', '2113020000100003', '2113020000100004', '2113020000100005', '2113020000110001', '2113020000110002', '2113020000110003', '2113020000110004', '2113020000120001', '2113020000120002', '2113020000120003', '2113020000120004', '2113020000120005', '2113020000120006', '2113020000130001', '2113020000130002', '2113020000130003', '2113020000130004', '2113020000130005', '2201010000060001', '2201010000060002', '2201010000060003', '2201010000060004', '2201010000060005', '2201020000370001', '2201020000370002', '2201020000370003', '2201020000370004', '2201020000380001', '2201020000380002', '2201020000380003', '2201020000380004', '2201020000380005', '2201020000390001', '2201020000390002', '2201020000390003', '2201020000390004', '2205050000560001', '2205050000560002', '2205050000560003', '2205050000570001', '2205050000570002', '2205050000570003', '2205050000580001', '2205050000580002', '2205050000580003', '2205050000590001', '2205050000590002', '2205050000590003', '3503010001320001', '3503010001320002', '3503010001320003', '3503010001320004', '3503010001320005', '3503010001320006', '3503010001320007', '3503010001320008', '3503010001320009', '3503010001320010', '3503010001320011', '3503010001320012', '3503010001320013', '3503010001320014', '3503010001320015', '3503010001320016', '3503010001320017', '3503010001320018', '3503010001320019', '3503010001320020', '3503010001320021', '3503010001320022', '3503010001320023', '3503010001320024', '3503010001320025', '3503010001320026', '3503010001320027', '3503010001320028', '3503010001320029', '3503010001320030', '3503010001320031', '3503010001320032', '3503010001320033', '3503010001320034', '3503010001320035', '3503010001320036', '3503010001320037', '3503010001320038', '3503010001320039', '3503010001320040', '3503010001320041', '3503010001320042', '3503010001320043', '3503010001320044', '3503010001320045', '3503010001320046', '3503010001320047', '3503010001320048', '3503010001320049', '3503010001320050', '3503010001320051', '3503010001320052', '3503010001320053', '3503010001320054', '3503010001320055', '3503010001320056', '3503010001320057', '3503010001320058', '3503010001320059', '3503010001320060', '3503010001320061', '3503010001320062', '3503010001320063', '3503010001320064', '3503010001320065', '3503010001320066', '3503010001320067', '3503010001320068', '3503010001320069', '3503010001320070', '3503010001320071', '3503010001320072', '3503010001320073', '3503010001320074', '3503010001320075', '3503010001320076', '3503010001320077', '3503010001320078', '3503010001320079', '3503010001320080', '3503010001320081', '3503010001320082', '3503010001320083', '3503010001320084', '3503010001330001', '3503010001330002', '3503010001330003', '3503010001330004', '3503010001330005', '3503010001330006', '3503010001330007', '3503010001330008', '3503010001330009', '3503010001330010', '3503010001330011', '3503010001330012', '3503010001330013', '3503010001330014', '3503010001330015', '3503010001330016', '3503010001330017', '3503010001330018', '3503010001330019', '3503010001330020', '3503010001330021', '3503010001330022', '3503010001330023', '3503010001330024', '3503010001330025', '3503010001330026', '3503010001330027', '3503010001330028', '3503010001330029', '3503010001330030', '3503010001330031', '3503010001330032', '3503010001330033', '3503010001330034', '3503010001330035', '3503010001330036', '3503010001330037', '3503010001330038', '3503010001330039', '3503010001330040', '3503010001330041', '3503010001330042', '3503010001330043', '3503010001330044', '3503010001330045', '3503010001330046', '3503010001330047', '3503010001330048', '3503010001330049', '3503010001330050', '3503010001330051', '3503010001330052', '3503010001330053', '3503010001330054', '3503010001330055', '3503010001330056', '3503010001330057', '3503010001330058', '3503010001330059', '3503010001330060', '3503010001330061', '3503010001330062', '3503010001330063', '3503010001330064', '3503010001330065', '3503010001330066', '3503010001330067', '3503010001330068', '3503010001330069', '3503010001330070', '3503010001330071', '3503010001330072', '3503010001330073', '3503010001330074', '3503010001330075', '3503010001330076', '3503010001330077', '3503010001330078', '3503010001330079', '3503010001330080', '3503010001330081', '3503010001330082', '3503010001330083', '3503010001330084', '3503010001340001', '3503010001340002', '3503010001340003', '3503010001340004', '3503010001340005', '3503010001340006', '3503010001340007', '3503010001340008', '3503010001340009', '3503010001340010', '3503010001340011', '3503010001340012', '3503010001340013', '3503010001340014', '3503010001340015', '3503010001340016', '3503010001340017', '3503010001340018', '3503010001340019', '3503010001340020', '3503010001340021', '3503010001340022', '3503010001340023', '3503010001340024', '3503010001340025', '3503010001340026', '3503010001340027', '3503010001340028', '3503010001340029', '3503010001340030', '3503010001340031', '3503010001340032', '3503010001340033', '3503010001340034', '3503010001340035', '3503010001340036', '3503010001340037', '3503010001340038', '3503010001340039', '3503010001340040', '3503010001340041', '3503010001340042', '3503010001340043', '3503010001340044', '3503010001340045', '3503010001340046', '3503010001340047', '3503010001340048', '3503010001340049', '3503010001340050', '3503010001340051', '3503010001340052', '3503010001340053', '3503010001340054', '3503010001340055', '3503010001340056', '3503010001340057', '3503010001340058', '3503010001340059', '3503010001340060', '3503010001340061', '3503010001340062', '3503010001340063', '3503010001340064', '3503010001340065', '3503010001340066', '3503010001340067', '3503010001340068', '3503010001340069', '3503010001340070', '3503010001340071', '3503010001340072', '3503010001340073', '3503010001340074', '3503010001340075', '3503010001340076', '3503010001340077', '3503010001340078', '3503010001340079', '3503010001340080', '3503010001340081', '3503010001340082', '3503010001340083', '3503010001340084', '3503010001350001', '3503010001350002', '3503010001350003', '3503010001350004', '3503010001350005', '3503010001350006', '3503010001350007', '3503010001350008', '3503010001350009', '3503010001350010', '3503010001350011', '3503010001350012', '3503010001350013', '3503010001350014', '3503010001350015', '3503010001350016', '3503010001350017', '3503010001350018', '3503010001350019', '3503010001350020', '3503010001350021', '3503010001350022', '3503010001350023', '3503010001350024', '3503010001350025', '3503010001350026', '3503010001350027', '3503010001350028', '3503010001350029', '3503010001350030', '3503010001350031', '3503010001350032', '3503010001350033', '3503010001350034', '3503010001350035', '3503010001350036', '3503010001350037', '3503010001350038', '3503010001350039', '3503010001350040', '3503010001350041', '3503010001350042', '3503010001350043', '3503010001350044', '3503010001350045', '3503010001350046', '3503010001350047', '3503010001350048', '3503010001350049', '3503010001350050', '3503010001350051', '3503010001350052', '3503010001350053', '3503010001350054', '3503010001350055', '3503010001350056', '3503010001350057', '3503010001350058', '3503010001350059', '3503010001350060', '3503010001350061', '3503010001350062', '3503010001350063', '3503010001350064', '3503010001350065', '3503010001350066', '3503010001350067', '3503010001350068', '3503010001350069', '3503010001350070', '3503010001350071', '3503010001350072', '3503010001350073', '3503010001350074', '3503010001350075', '3503010001350076', '3503010001350077', '3503010001350078', '3503010001350079', '3503010001350080', '3503010001350081', '3503010001350082', '3503010001350083', '3503010001350084', '3503010001360001', '3503010001360002', '3503010001360003', '3503010001360004', '3503010001360005', '3503010001360006', '3503010001360007', '3503010001360008', '3503010001360009', '3503010001360010', '3503010001360011', '3503010001360012', '3503010001360013', '3503010001360014', '3503010001360015', '3503010001360016', '3503010001360017', '3503010001360018', '3503010001360019', '3503010001360020', '3503010001360021', '3503010001360022', '3503010001360023', '3503010001360024', '3503010001360025', '3503010001360026', '3503010001360027', '3503010001360028', '3503010001360029', '3503010001360030', '3503010001360031', '3503010001360032', '3503010001360033', '3503010001360034', '3503010001360035', '3503010001360036', '3503010001360037', '3503010001360038', '3503010001360039', '3503010001360040', '3503010001360041', '3503010001360042', '3503010001360043', '3503010001360044', '3503010001360045', '3503010001360046', '3503010001360047', '3503010001360048', '3503010001360049', '3503010001360050', '3503010001360051', '3503010001360052', '3503010001360053', '3503010001360054', '3503010001360055', '3503010001360056', '3503010001360057', '3503010001360058', '3503010001360059', '3503010001360060', '3503010001360061', '3503010001360062', '3503010001360063', '3503010001360064', '3503010001360065', '3503010001360066', '3503010001360067', '3503010001360068', '3503010001360069', '3503010001360070', '3503010001360071', '3503010001360072', '3503010001360073', '3503010001360074', '3503010001360075', '3503010001360076', '3503010001360077', '3503010001360078', '3503010001360079', '3503010001360080', '3503010001360081', '3503010001360082', '3503010001360083', '3503010001360084', '3503010001370001', '3503010001370002', '3503010001370003', '3503010001370004', '3503010001370005', '3503010001370006', '3503010001370007', '3503010001370008', '3503010001370009', '3503010001370010', '3503010001370011', '3503010001370012', '3503010001370013', '3503010001370014', '3503010001370015', '3503010001370016', '3503010001370017', '3503010001370018', '3503010001370019', '3503010001370020', '3503010001370021', '3503010001370022', '3503010001370023', '3503010001370024', '3503010001370025', '3503010001370026', '3503010001370027', '3503010001370028', '3503010001370029', '3503010001370030', '3503010001370031', '3503010001370032', '3503010001370033', '3503010001370034', '3503010001370035', '3503010001370036', '3503010001370037', '3503010001370038', '3503010001370039', '3503010001370040', '3503010001370041', '3503010001370042', '3503010001370043', '3503010001370044', '3503010001370045', '3503010001370046', '3503010001370047', '3503010001370048', '3503010001370049', '3503010001370050', '3503010001370051', '3503010001370052', '3503010001370053', '3503010001370054', '3503010001370055', '3503010001370056', '3503010001370057', '3503010001370058', '3503010001370059', '3503010001370060', '3503010001370061', '3503010001370062', '3503010001370063', '3503010001370064', '3503010001370065', '3503010001370066', '3503010001370067', '3503010001370068', '3503010001370069', '3503010001370070', '3503010001370071', '3503010001370072', '3503010001370073', '3503010001370074', '3503010001370075', '3503010001370076', '3503010001370077', '3503010001370078', '3503010001370079', '3503010001370080', '3503010001370081', '3503010001370082', '3503010001370083', '3503010001370084', '3503010001380001', '3503010001380002', '3503010001380003', '3503010001380004', '3503010001380005', '3503010001380006', '3503010001380007', '3503010001380008', '3503010001380009', '3503010001380010', '3503010001380011', '3503010001380012', '3503010001380013', '3503010001380014', '3503010001380015', '3503010001380016', '3503010001380017', '3503010001380018', '3503010001380019', '3503010001380020', '3503010001380021', '3503010001380022', '3503010001380023', '3503010001380024', '3503010001380025', '3503010001380026', '3503010001380027', '3503010001380028', '3503010001380029', '3503010001380030', '3503010001380031', '3503010001380032', '3503010001380033', '3503010001380034', '3503010001380035', '3503010001380036', '3503010001380037', '3503010001380038', '3503010001380039', '3503010001380040', '3503010001380041', '3503010001380042', '3503010001380043', '3503010001380044', '3503010001380045', '3503010001380046', '3503010001380047', '3503010001380048', '3503010001380049', '3503010001380050', '3503010001380051', '3503010001380052', '3503010001380053', '3503010001380054', '3503010001380055', '3503010001380056', '3503010001380057', '3503010001380058', '3503010001380059', '3503010001380060', '3503010001380061', '3503010001380062', '3503010001380063', '3503010001380064', '3503010001380065', '3503010001380066', '3503010001380067', '3503010001380068', '3503010001380069', '3503010001380070', '3503010001380071', '3503010001380072', '3503010001380073', '3503010001380074', '3503010001380075', '3503010001380076', '3503010001380077', '3503010001380078', '3503010001380079', '3503010001380080', '3503010001380081', '3503010001380082', '3503010001380083', '3503010001380084', '3503010001390001', '3503010001390002', '3503010001390003', '3503010001390004', '3503010001390005', '3503010001390006', '3503010001390007', '3503010001390008', '3503010001390009', '3503010001390010', '3503010001390011', '3503010001390012', '3503010001390013', '3503010001390014', '3503010001390015', '3503010001390016', '3503010001390017', '3503010001390018', '3503010001390019', '3503010001390020', '3503010001390021', '3503010001390022', '3503010001390023', '3503010001390024', '3503010001390025', '3503010001390026', '3503010001390027', '3503010001390028', '3503010001390029', '3503010001390030', '3503010001390031', '3503010001390032', '3503010001390033', '3503010001390034', '3503010001390035', '3503010001390036', '3503010001390037', '3503010001390038', '3503010001390039', '3503010001390040', '3503010001390041', '3503010001390042', '3503010001390043', '3503010001390044', '3503010001390045', '3503010001390046', '3503010001390047', '3503010001390048', '3503010001390049', '3503010001390050', '3503010001390051', '3503010001390052', '3503010001390053', '3503010001390054', '3503010001390055', '3503010001390056', '3503010001390057', '3503010001390058', '3503010001390059', '3503010001390060', '3503010001390061', '3503010001390062', '3503010001390063', '3503010001390064', '3503010001390065', '3503010001390066', '3503010001390067', '3503010001390068', '3503010001390069', '3503010001390070', '3503010001390071', '3503010001390072', '3503010001390073', '3503010001390074', '3503010001390075', '3503010001390076', '3503010001390077', '3503010001390078', '3503010001390079', '3503010001390080', '3503010001390081', '3503010001390082', '3503010001390083', '3503010001390084'];        $spec_attrses = $goods_attr_model->getgoods_specsbyskus($skus, $lang);        $ex_hs_attrses = $goods_attr_model->getgoods_specsbyskus($skus, $lang);        foreach ($skus as $sku) {            //   $sku = $item['sku'];            $hs_attrs = $spec_attrs = null;            if (isset($spec_attrses[$sku])) {                $spec = json_encode($spec_attrses[$sku], 256);            }            if (isset($ex_hs_attrses[$sku])) {                $hs_attrs = json_encode($ex_hs_attrses[$sku], 256);            }            $where = ['sku' => $sku, 'lang' => $lang];            try {                if ($hs_attrs || $spec) {                    Log::append(MYPATH . '/logs/attr.sql', "update erui_goods.goods_attr set spec_attrs = '"                            . $spec . "',ex_hs_attrs='" . $hs_attrs . "' where sku = '"                            . $sku . "' and lang = '" . $lang . "';\r\n");                    $goods_attr_model->table('erui_goods.goods_attr')                            ->where($where)                            ->save(['spec_attrs' => $spec,                                'ex_hs_attrs' => $hs_attrs]);                }            } catch (Exception $ex) {                Log::write($sku);                Log::write($ex->getMessage());            }        }        echo 'OK', PHP_EOL;        ob_flush();        flush();        //}    }    /* 通过批量导入商品信息到ES     * @param string $lang // 语言     * @return mix     */    public function importgoodss($lang = 'en') {        try {            $count = $this->where(['lang' => $lang])->count('id');            for ($i = 0; $i < $count; $i += 100) {                if ($i > $count) {                    $i = $count;                }                echo $i, PHP_EOL;                ob_flush();                flush();                $goods = $this->where(['lang' => $lang])                                ->limit($i, 100)->select();                $spus = $skus = [];                if ($goods) {                    foreach ($goods as $item) {                        $skus[] = $item['sku'];                        $spus[] = $item['spu'];                    }                } else {                    return false;                }                $spus = array_unique($spus);                $skus = array_unique($skus);                $espoducmodel = new EsproductModel();                $es = new ESClient();                $productattrs = $espoducmodel->getproductattrsbyspus($spus, $lang);                $attachs = $this->getgoods_attachsbyskus($skus, $lang);                $goods_attrs = $this->getgoods_attrbyskus($skus, $lang);                $specs = $this->getgoods_specsbyskus($skus, $lang);                foreach ($goods as $item) {                    $id = $item['sku'];                    $this->_findnulltoempty($item);                    $body = $item;                    $body['meterial_cat'] = $productattrs[$item['spu']]['meterial_cat'];                    $body['show_cats'] = $productattrs[$item['spu']]['show_cats'];                    $product_attrs = json_decode($productattrs[$item['spu']]['attrs'], true);                    if (isset($specs[$item['sku']])) {                        $body['specs'] = json_encode($specs[$item['sku']], 256);                    } else {                        $body['specs'] = '[]';                    }                    if (isset($attachs[$item['sku']])) {                        $body['attachs'] = json_encode($attachs[$item['sku']], 256);                    } else {                        $body['attachs'] = '[]';                    }                    if (isset($goods_attrs[$item['sku']]) && $product_attrs) {                        foreach ($goods_attrs[$item['sku']] as $attr) {                            array_push($product_attrs, $attr);                        }                    } elseif (isset($goods_attrs[$item['sku']])) {                        $product_attrs = $goods_attrs[$item['sku']];                    }                    $body['attrs'] = json_encode($product_attrs, JSON_UNESCAPED_UNICODE);                    $body['supplier_name'] = $productattrs[$item['spu']]['supplier_name'];                    $body['brand'] = $productattrs[$item['spu']]['brand'];                    $body['source'] = $productattrs[$item['spu']]['source'];                    if ($body['source'] == 'ERUI') {                        $body['sort_order'] = 100;                    } else {                        $body['sort_order'] = 1;                    }                    if (in_array($body['brand'], ['KERUI', '科瑞'])) {                        $body['sort_order'] += 20;                    }                    $body['supplier_id'] = $productattrs[$item['spu']]['supplier_id'];                    $body['meterial_cat_no'] = $productattrs[$item['spu']]['meterial_cat_no'];                    $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);                    print_r($flag);                    ob_flush();                    flush();                }            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    public function getInsertCodition($condition, $lang = 'en') {        $data = [];        if (isset($condition['id'])) {            $data['id'] = $condition['id'];        }        $data['lang'] = $lang;        $meterial_cat_no = null;        if (isset($condition['spu'])) {            $data['spu'] = $condition['spu'];            $mpmodel = new Materialcatproduct();            $meterial_cat_noinfo = $mpmodel->getcatnobyspu($data['spu']);            $meterial_cat_no = $meterial_cat_noinfo['cat_no'];        } else {            $data['spu'] = '';        }        if (isset($condition['sku'])) {            $data['sku'] = $condition['sku'];        } else {            $data['sku'] = '';        }        if ($meterial_cat_no) {            $material_cat_no = $data['meterial_cat_no'] = $condition['meterial_cat_no'];            $mcatmodel = new MaterialcatModel();            $data['meterial_cat'] = json_encode($mcatmodel->getinfo($material_cat_no, $lang), 256);            $smmodel = new ShowmaterialcatModel();            $show_cat_nos = $smmodel->getshowcatnosBymatcatno($material_cat_no, $lang);            $es_product_model = new EsproductModel();            $scats = $es_product_model->getshow_cats($show_cat_nos, $lang);            $data['show_cats'] = json_encode($scats[$material_cat_no], 256);        } else {            $data['meterial_cat_no'] = '';            $data['meterial_cat'] = json_encode(new \stdClass());            $data['show_cats'] = json_encode([]);        }        if (isset($condition['qrcode'])) {            $data['qrcode'] = $condition['qrcode'];        } else {            $data['qrcode'] = '';        }        if (isset($condition['name'])) {            $data['name'] = $condition['name'];        } else {            $data['name'] = '';        }        if (isset($condition['show_name'])) {            $data['show_name'] = $condition['show_name'];        } else {            $data['show_name'] = '';        }        if (isset($condition['model'])) {            $data['model'] = $condition['model'];        } else {            $data['model'] = '';        }        if (isset($condition['description'])) {            $data['description'] = $condition['description'];        } else {            $data['description'] = '';        }        if (isset($condition['package_quantity'])) {            $data['package_quantity'] = $condition['package_quantity'];        } else {            $data['package_quantity'] = '';        }        if (isset($condition['exw_day'])) {            $data['exw_day'] = $condition['exw_day'];        } else {            $data['exw_day'] = '';        }        if (isset($condition['purchase_price1'])) {            $data['purchase_price1'] = $condition['purchase_price1'];        } else {            $data['purchase_price1'] = '';        }        if (isset($condition['purchase_price2'])) {            $data['purchase_price2'] = $condition['purchase_price2'];        } else {            $data['purchase_price2'] = '';        }        if (isset($condition['purchase_price_cur'])) {            $data['purchase_price_cur'] = $condition['purchase_price_cur'];        } else {            $data['purchase_price_cur'] = '';        }        if (isset($condition['purchase_unit'])) {            $data['purchase_unit'] = $condition['purchase_unit'];        } else {            $data['purchase_unit'] = '';        }        if (isset($condition['pricing_flag'])) {            $data['pricing_flag'] = $condition['pricing_flag'] == 'Y' ? 'Y' : 'N';        } else {            $data['pricing_flag'] = 'N';        }        if (isset($condition['status']) && in_array($condition['status'], ['VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {            $data['status'] = strtoupper($condition['status']);        } else {            $data['status'] = 'CHECKING';        }        if (isset($condition['created_by'])) {            $data['created_by'] = $condition['created_by'];        } else {            $data['created_by'] = '';        }        if (isset($condition['created_at'])) {            $data['created_at'] = $condition['created_at'];        } else {            $data['created_at'] = '';        }        if (isset($condition['supplier_id']) && $condition['supplier_id']) {            $data['supplier_id'] = $condition['supplier_id'];        } else {            $data['supplier_id'] = '';        }        if (isset($condition['supplier_name']) && $condition['supplier_name']) {            $data['supplier_name'] = $condition['supplier_name'];        } else {            $data['supplier_name'] = '';        }        if (isset($condition['brand'])) {            $data['brand'] = $condition['brand'];        } else {            $data['brand'] = '';        }        if (isset($condition['source'])) {            $data['source'] = $condition['source'];        } else {            $data['source'] = '';        }        return $data;    }    /*     * 添加产品到Es     * @param string $lang // 语言 zh en ru es     * @return mix     */    public function create_data($data, $lang = 'en') {        try {            $es = new ESClient();            if (!isset($data['sku']) || empty($data['sku'])) {                return false;            }            $body = $this->getInsertCodition($data);            $id = $data['sku'];            $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /*     * 添加产品到Es     * @param string $lang // 语言 zh en ru es     * @return mix     */    public function update_data($data, $sku, $lang = 'en') {        try {            $es = new ESClient();            if (empty($sku)) {                return false;            } else {                $data['sku'] = $sku;            }            $body = $this->getInsertCodition($data);            $id = $sku;            $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /* 上架     *     */    public function changestatus($sku, $lang = 'en') {        try {            $es = new ESClient();            if (empty($sku)) {                return false;            }            if (in_array(strtoupper($status), ['VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {                $data['status'] = strtoupper($status);            } else {                $data['status'] = 'CHECKING';            }            $id = $sku;            $flag = $es->update_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /* 更新属性规格     *     */    public function Update_Attrs($sku, $lang = 'en', $product_attrs = [], $product_specs = []) {        $es = new ESClient();        if (empty($sku)) {            return false;        }        $goodsmodel = new GoodsModel();        $goodsinfo = $goodsmodel->getInfo($sku, $lang);        $goods_attrs = $this->getgoods_attrbyskus([$sku], $lang);        $specs = $this->getgoods_specsbyskus([$sku], $lang);        $EsproductModel = new EsproductModel();        if (empty($product_attrs)) {            $product_attrs = $EsproductModel->getgoods_specsbyspus([$goodsinfo['spu']], $lang);        }        if (empty($product_specs)) {            $product_specs = $EsproductModel->getproductattrsbyspus([$goodsinfo['spu']], $lang);        }        $goods_attrs = $goods_attrs[$sku];        $specs = $specs[$sku];        if (isset($specs[$item['sku']])) {            $body['specs'] = json_encode($specs[$item['sku']], 256);        } else {            $body['specs'] = '[]';        }        if (isset($product_attrs[$goodsinfo['spu']]) && $goods_attrs) {            foreach ($product_attrs[$goodsinfo['spu']] as $attr) {                array_push($goods_attrs, $attr);            }        } elseif (isset($product_attrs[$goodsinfo['spu']])) {            $goods_attrs = $product_attrs[$goodsinfo['spu']];        }        if (isset($product_specs[$goodsinfo['spu']]) && $specs) {            foreach ($product_specs[$goodsinfo['spu']] as $spec) {                array_push($specs, $spec);            }        } elseif (isset($product_specs[$goodsinfo['spu']])) {            $specs = $product_specs[$goodsinfo['spu']];        }        $data['attrs'] = json_encode($goods_attrs, JSON_UNESCAPED_UNICODE);        $id = $sku;        $data['specs'] = json_encode($specs, 256);        $type = $this->tableName . '_' . $lang;        $es->update_document($this->dbName, $type, $data, $id);        return true;    }    /* 新增ES     *     */    public function Update_Attachs($sku, $lang = 'en') {        $es = new ESClient();        if (empty($spu)) {            return false;        }        $attachs = $this->getgoods_attachsbyskus([$sku], $lang);        if (isset($attachs[$sku])) {            $data['attachs'] = json_encode($attachs[$sku], 256);        } else {            $data['attachs'] = '[]';        }        $id = $spu;        $type = $this->tableName . '_' . $lang;        $es->update_document($this->dbName, $type, $data, $id);        return true;    }    public function delete_data($sku, $lang = 'en') {        $es = new ESClient();        if (empty($sku)) {            return false;        }        $data['status'] = self::STATUS_DELETED;        $id = $sku;        $type = $this->tableName . '_' . $lang;        $flag = $es->update_document($this->dbName, $type, $data, $id);        return true;    }}