<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Esgoods * * @author zhongyg */class EsgoodsModel extends PublicModel {    //put your code here    protected $tableName = 'goods';    protected $dbName = 'erui_goods'; //数据库名称    public function __construct($str = '') {        parent::__construct($str = '');    }    /* 条件组合     * @param mix $condition // 搜索条件     */    /* 条件组合     * @param mix $condition // 搜索条件     */    private function getCondition($condition) {        $body = [];        $name = $sku = $spu = $show_cat_no = $status = $show_name = $attrs = '';        if (isset($condition['sku']) && $condition['sku']) {            $sku = $condition['sku'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['sku' => $sku]];        }        if (isset($condition['spu']) && $condition['spu']) {            $spu = $condition['spu'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['spu' => $spu]];        }        if (isset($condition['skus']) && $condition['skus']) {            $skus = $condition['skus'];            $skus_arr = [];            foreach ($skus as $sku) {                $skus_arr[] = [ESClient::MATCH_PHRASE => ['sku' => $sku]];            }            $body['query']['bool']['must'][] = ['bool' => [ESClient::SHOULD => $skus_arr]];        }        if (isset($condition['show_cat_no']) && $condition['show_cat_no']) {            $show_cat_no = $condition['show_cat_no'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_cats' => $show_cat_no]];        }        if (isset($condition['mcat_no1'])) {            $mcat_no1 = $condition['mcat_no1'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no1]];        }        if (isset($condition['mcat_no2'])) {            $mcat_no2 = $condition['mcat_no2'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no2]];        }        if (isset($condition['mcat_no3'])) {            $mcat_no3 = $condition['mcat_no3'];            $body['query']['bool']['must'][] = [ESClient::MATCH =>                ['meterial_cat' => $mcat_no3]];        }        if (isset($condition['name']) && $condition['name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['name']) && $condition['name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['show_name']) && $condition['show_name']) {            $name = $condition['name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_name' => ['query' => $name,                        'minimum_should_match' => '75%']]];        }        if (isset($condition['real_name']) && $condition['real_name']) {            $real_name = $condition['real_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['name' => $real_name]];        }        if (isset($condition['supplier_name']) && $condition['supplier_name']) {            $supplier_name = $condition['supplier_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['supplier_name' => $supplier_name]];        }        if (isset($condition['brand']) && $condition['brand']) {            $brand = $condition['brand'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['brand' => $brand]];        }        if (isset($condition['source']) && $condition['source']) {            $source = $condition['source'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['source' => $source]];        }        if (isset($condition['cat_name']) && $condition['cat_name']) {            $cat_name = $condition['cat_name'];            $body['query']['bool']['must'][] = [ESClient::MATCH => ['show_cats' => $cat_name]];        }        if (isset($condition['created_at_start']) && isset($condition['created_at_end']) && $condition['created_at_start'] && $condition['created_at_end']) {            $created_at_start = $condition['created_at_start'];            $created_at_end = $condition['created_at_end'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gte' => $created_at_start,                        'gle' => $created_at_end,                    ]                ]            ];        } elseif (isset($condition['created_at_start']) && $condition['created_at_start']) {            $created_at_start = $condition['created_at_start'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gte' => $created_at_start,                    ]                ]            ];        } elseif (isset($condition['created_at_end']) && $condition['created_at_end']) {            $created_at_end = $condition['created_at_end'];            $body['query']['bool']['must'][] = [ESClient::RANGE => ['created_at' =>                    ['gle' => $created_at_end,                    ]                ]            ];        }        if (isset($condition['status'])) {            $status = $condition['status'];            if (!in_array($status, ['NORMAL', 'VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {                $status = 'VALID';            }            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['status' => $status]];        } else {            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['status' => 'VALID']];        }        if (isset($condition['model']) && $condition['model']) {            $model = $condition['model'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['model' => $model]];        }        if (isset($condition['created_by']) && $condition['created_by']) {            $created_by = $condition['created_by'];            $body['query']['bool']['must'][] = [ESClient::MATCH_PHRASE => ['created_by' => $created_by]];        }        if (isset($condition['keyword'])) {            $show_name = $condition['keyword'];            $body['query']['bool']['must'][] = ['bool' => [ESClient::SHOULD => [                        [ESClient::MULTI_MATCH => [                                'query' => $show_name,                                'type' => 'most_fields',                                'fields' => ['show_name', 'attrs', 'specs', 'spu', 'source', 'brand', 'name']                            ]],                        [ESClient::WILDCARD => ['show_name.all' => '*' . $show_name . '*']],                        [ESClient::WILDCARD => ['name.all' => '*' . $show_name . '*']],            ]]];        }        return $body;    }    /* 通过搜索条件获取数据列表     * @param mix $condition // 搜索条件     * @param string $lang // 语言     * @return mix     */    public function getgoods($condition, $_source = null, $lang = 'en') {        try {            if (!$_source) {                $_source = ['sku', 'spu', 'name', 'show_name', 'model'                    , 'purchase_price1', 'purchase_price2', 'attachs', 'package_quantity', 'exw_day',                    'purchase_price_cur', 'purchase_unit', 'pricing_flag', 'show_cats',                    'meterial_cat', 'brand', 'supplier_name', 'warranty'];            }            $body = $this->getCondition($condition);            if (!$body) {                $body['query']['bool']['must'][] = ['match_all' => []];            }            $pagesize = 10;            $current_no = 1;            if (isset($condition['current_no'])) {                $current_no = intval($condition['current_no']) > 0 ? intval($condition['current_no']) : 1;            }            if (isset($condition['pagesize'])) {                $pagesize = intval($condition['pagesize']) > 0 ? intval($condition['pagesize']) : 10;            }            $from = ($current_no - 1) * $pagesize;            $es = new ESClient();            return [$es->setbody($body)                        ->setfields($_source)                        ->setsort('sort_order', 'desc')                        ->setsort('_score', 'desc')                        ->search($this->dbName, $this->tableName . '_' . $lang, $from, $pagesize), $from, $pagesize];        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过搜索条件获取数据列表     * @param mix $condition // 搜索条件     * @param string $lang // 语言     * @return mix     */    public function getshow_catlist($condition, $lang = 'en') {        try {            $body = $this->getCondition($condition);            $from = ($current_no - 1) * $pagesize;            $es = new ESClient();            return $es->setbody($body)                            ->setaggs('show_cats', 'chowcat', 'terms')                            ->search($this->dbName, $this->tableName . '_' . $lang, $from);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过ES 获取数据列表     * @param string $name // 商品名称 属性名称或属性值     * @param string $show_cat_no // 展示分类编码     * @return mix     */    public function getGoodsbysku($sku, $lang = 'en') {        try {            $es = new ESClient();            $es->setmust(['sku' => $sku], ESClient::TERM);            return $es->search($this->dbName, $this->tableName . '_' . $lang);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过ES 获取数据列表     * @param string $name // 商品名称 属性名称或属性值     * @param string $show_cat_no // 展示分类编码     * @return mix     */    public function getGoodsbyspu($sku, $lang = 'en') {        try {            $es = new ESClient();            $es->setmust(['sku' => $sku], ESClient::TERM);            return $es->search($this->dbName, $this->tableName . '_' . $lang);        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品属性列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_attrbyskus($skus, $lang = 'en') {        try {            $product_attrs = $this->table('erui_goods.t_goods_attr')                    ->field('*')                    ->where(['sku' => ['in', $skus], 'spec_flag' => 'N', 'lang' => $lang, 'status' => 'VALID'])                    ->select();            $ret = [];            foreach ($product_attrs as $item) {                $sku = $item['sku'];                unset($item['sku']);                $ret[$sku][] = $item;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品文件列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_attachsbyskus($skus, $lang = 'en') {        try {            $goods_attachs = $this->table('erui_goods.t_goods_attach')                    ->field('id,attach_type,attach_url,attach_name,attach_url,sku')                    ->where(['sku' => ['in', $skus],                        'attach_type' => ['in', ['BIG_IMAGE', 'MIDDLE_IMAGE', 'SMALL_IMAGE', 'DOC']],                        'status' => 'VALID'])                    ->select();            $ret = [];            if ($goods_attachs) {                foreach ($goods_attachs as $item) {                    $data['attach_name'] = $item['attach_name'];                    $data['attach_url'] = $item['attach_url'];                    $ret[$item['sku']][$item['attach_type']][] = $data;                }            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品规格列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getgoods_specsbyskus($skus, $lang = 'en') {        try {            $product_attrs = $this->table('erui_goods.t_goods_attr')                    ->field('sku,attr_name,attr_value,attr_no')                    ->where(['sku' => ['in', $skus],                        'lang' => $lang,                        'spec_flag' => 'Y',                        'status' => 'VALID'                    ])                    ->select();            $ret = [];            foreach ($product_attrs as $item) {                $sku = $item['sku'];                unset($item['sku']);                $ret[$sku][] = $item;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /* 通过SKU获取数据商品产品属性分类等信息列表     * @param mix $skus // 商品SKU编码数组     * @param string $lang // 语言     * @return mix     */    public function getproductattrsbyspus($skus, $lang = 'en') {        try {            $goodss = $this->where(['sku' => ['in', $skus], 'lang' => $lang])                    ->select();            $spus = $skus = [];            foreach ($goodss as $item) {                $skus[] = $item['sku'];                $spus[] = $item['spu'];            }            $spus = array_unique($spus);            $skus = array_unique($skus);            $espoducmodel = new EsproductModel();            $productattrs = $espoducmodel->getproductattrsbyspus($spus, $lang);            $goods_attrs = $this->getgoods_attrbyskus($spus, $lang);            $specs = $this->getgoods_specsbyskus($skus, $lang);            $ret = [];            foreach ($goodss as $item) {                $id = $item['id'];                $body = $item;                $body['meterial_cat'] = $productattrs[$item['spu']]['meterial_cat'];                $body['show_cat'] = $productattrs[$item['spu']]['show_cats'];                $body['specs'] = $specs[$item['sku']];                $product_attrs = json_decode($productattrs[$item['spu']]['attrs'], true);                foreach ($goods_attrs[$item['sku']] as $attr) {                    array_push($product_attrs, $attr);                }                $body['attrs'] = json_encode($product_attrs, JSON_UNESCAPED_UNICODE);                // $body['specs'] = json_encode($specs, JSON_UNESCAPED_UNICODE);                $ret[$id] = $body;            }            return $ret;        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return [];        }    }    /*     * 将数组中的null值转换为空值     * @author zyg 2017-07-31     * @param array $item // 语言 zh en ru es     * @return mix     */    private function _findnulltoempty(&$item) {        foreach ($item as $key => $val) {            if (is_null($val)) {                $item[$key] = '';            }        }    }    public function importgoodsattr($lang = 'en') {        $goods_attr_model = new NewAttrModel();        // $count = $goods_attr_model->where(['lang' => $lang, 'created_at' => '2017-08-15 00:00:00'])->count('id');        echo $goods_attr_model->_sql();//        for ($i = 0; $i < $count; $i += 100) {//            if ($i > $count) {//                $i = $count;//            }        echo $i, PHP_EOL;//            $goods = $goods_attr_model->field('id,sku,spu')//                    ->where(['lang' => $lang, 'created_at' => '2017-08-15 00:00:00'])//                    ->limit($i, 100)//                    ->group('sku')//                    ->select();////            $spus = $skus = [];////            if ($goods) {//                foreach ($goods as $item) {//                    $skus[] = $item['sku'];//                    //   $spus[] = $item['spu'];//                }//            } else {//                return false;//            }        $skus = ['0401060000010001', '0401070000010001', '0401070000020001', '0401070000030001', '0401070000040001', '0401080000010001', '0401090000010001', '0401090000020001', '0401090000030001', '0401090000040001', '0401090000050001', '0401090000060001', '0401090000070001', '0401090000080001', '0401090000090001', '0401090000100001', '0401090000110001', '0401090000120001', '0401090000130001', '0403010000010001', '1202090000010001', '1202090000010002', '1202090000020001', '1202090000020002', '1202090000030001', '1202090000030002', '1202090000040001', '1202090000040002', '1202090000050001', '1202090000050002', '1202090000060001', '1202090000060002', '1303080000040001', '1303080000050001', '1402440000040001', '1402440000050001', '1711010000070001', '1711010000070002', '1711010000070003', '1711010000070004', '1711010000070005', '1711010000070006', '1711010000070007', '1803020000010001', '1803020000010002', '1803020000010003', '1803020000010004', '1803020000010005', '1903010000630001', '1903010000640001', '1903010000650001', '2102010000190001', '2102010000200001', '2102010000210001', '2102010000220001', '2102010000230001', '2102010000240001', '2102010000250001', '2511010000160001', '2605020000690001', '2605020000690002', '2605020000690003', '2605020000690004', '2605020000690005', '2801010001210001', '2801010001210002', '2801010001210003', '2801010001210004', '2801010001210005', '2801010001210006', '2801010001210007', '2801010001210008', '2801010001220001', '2801010001220002', '2801010001220003', '2801010001220004', '2801010001220005', '2801010001220006', '2801010001220007', '2801010001220008', '2801010001230001', '2801010001230002', '2801010001230003', '2801010001230004', '2801010001230005', '2801010001230006', '2801010001230007', '2801010001230008', '2801010001230009', '2801010001230010', '2801010001240001', '2801010001240002', '2801010001240003', '2801010001240004', '2801010001250001', '2801010001250002', '2801010001250003', '2801010001250004', '2801010001250005', '2801010001250006', '2801010001250007', '2801010001250008', '2801010001260001', '2801010001260002', '2801010001260003', '2801010001260004', '2801010001260005', '2801010001260006', '2801010001260007', '2801010001260008', '2801010001270001', '2801010001270002', '2801010001270003', '2801010001270004', '2801010001270005', '2801010001270006', '2801020001080001', '2801020001090001', '2801020001100001', '2801020001110001', '2801030000470001', '2801040000280001', '2801040000290001', '2801040000300001', '2801040000310001', '2801040000320001', '2801040000330001', '2801040000340001', '2801040000350001', '2801040000360001', '2801060000250001', '2801060000250002', '2801060000250003', '2801060000250004', '2801060000250005', '2801060000260001', '2801080000010001', '2801080000020001', '2801080000030001', '2801090000020001', '2801090000030001', '2801090000040001', '2801090000050001', '2801090000060001', '2801090000070001', '2801090000080001', '2801090000090001', '2801090000100001', '2801090000110001', '2801090000120001', '2801100000010001', '2801100000020001', '2801100000020002', '2801100000020003', '2801100000020004', '2801100000020005', '2801100000030001', '2801100000040001', '2801100000050001', '2801100000060001', '2801100000070001', '2801100000080001', '2801120000050001', '2801120000060001', '2801120000070001', '2801120000080001', '2801120000090001', '2801120000100001', '2801130000010001', '2801140000010001', '2801140000020001', '2801140000030001', '2801140000040001', '2801150000530001', '2801150000540001', '2801150000550001', '2801150000560001', '2801150000570001', '2801150000580001', '2801160000300001', '2801160000310001', '2801160000320001', '2801160000330001', '2801160000340001', '2801160000350001', '2801160000360001', '2801160000370001', '2801160000380001', '2801160000390001', '2801160000400001', '2801160000410001', '2801160000420001', '2801160000430001', '2801160000440001', '2801190000030001', '2801260000030001', '2801260000040001', '2801270000050001', '2801270000060001', '2801270000070001', '2801290000090001', '2801310000010001', '2801310000020001', '2801310000020002', '2801310000020003', '2801310000030001', '2801310000030002', '2801310000030003', '2801310000030004', '2801310000030005', '2801310000030006', '2801310000040001', '2801310000050001', '2801310000060001', '2801310000070001', '2801320000030001', '2801320000040001', '2801320000050001', '2801320000060001', '2801320000070001', '2801320000080001', '2801320000090001', '2801320000100001', '2801320000110001', '2801320000120001', '2801320000130001', '2801320000130002', '2801320000130003', '2801320000140001', '2801320000150001', '2801320000160001', '2801320000170001', '2801320000180001', '2801320000190001', '2801320000200001', '2901010000450001', '2902010000260001', '2902010000260002', '2902010000260003', '2903010000200001', '2903010000200002', '2905010000120001', '2905010000130001', '3101020000640001', '3101020000640002', '3101020000640003', '3101020000640004', '3101020000640005', '3101020000640006', '3101020000640007', '3101020000640008', '3101020000640009', '3101020000640010', '3101020000640011', '3101020000640012', '3101020000640013', '3101020000640014', '3101020000640015', '3101020000640016', '3101060000280001', '3101060000280002', '3101190000010001', '3101190000010002', '3101190000010003', '3101190000010004', '3101190000010005', '3101190000010006', '3101190000010007', '3101190000010008', '3101190000010009', '3101190000010010', '3101190000010011', '3101190000010012', '3101190000010013', '3101190000010014', '3101190000010015', '3101190000010016', '3101190000010017', '3101190000010018', '3101200000010001', '3101200000010002', '3101200000010003', '3101200000010004', '3303100000050001', '3501010000320001', '3501010000320002', '3501010000320003', '3502030000020001', '3502030000030001', '3502030000030002', '3502030000030003', '3502030000030004', '3502030000030005', '3502030000030006', '3502030000030007', '3502030000040001', '3502030000040002', '3502030000040003', '3502030000040004', '3502030000040005', '3502030000050001', '3502030000050002', '3502030000050003', '3502030000050004', '3502030000050005', '3502030000050006', '3502030000050007', '3502030000050008', '3502030000050009', '3502030000050010', '3502030000050011', '3502030000050012', '3502030000050013', '3502030000050014', '3502030000050015', '3502030000050016', '3502030000050017', '3502030000050018', '3502030000060001', '3502030000060002', '3502030000060003', '3502030000060004', '3502030000060005', '3502030000060006', '3502030000060007', '3502030000060008', '3502030000070001', '3502030000070002', '3502030000070003', '3502040000240001', '3502040000240002', '3502040000240003', '3502040000240004', '3502040000240005', '3502040000240006', '3502040000240007', '3502040000240008', '3502040000240009', '3502040000240010', '3502040000240011', '3502040000240012', '3502040000240013', '3502040000240014', '3502040000240015', '3502040000240016', '3502040000240017', '3502040000240018', '3502040000240019', '3502040000240020', '3502040000240021', '3502040000240022', '3502040000240023', '3502040000240024', '3502040000240025', '3502040000240026', '3502040000240027', '3502040000240028', '3502040000240029', '3502040000240030', '3502040000240031', '3502040000240032', '3502040000240033', '3502040000240034', '3502040000240035', '3502040000240036', '3502040000240037', '3502040000240038', '3502040000240039', '3502040000240040', '3502040000240041', '3502040000240042', '3502040000240043', '3502040000240044', '3502040000240045', '3502040000240046', '3502040000250001', '3502040000250002', '3502040000250003', '3502040000250004', '3502040000250005', '3502040000250006', '3502040000250007', '3502040000250008', '3502040000250009', '3502040000250010', '3502040000250011', '3502040000250012', '3502040000250013', '3502040000250014', '3502040000250015', '3502040000250016', '3502040000250017', '3502040000250018', '3502040000250019', '3502040000250020', '3502040000250021', '3502040000250022', '3502040000250023', '3502040000250024', '3502040000250025', '3502040000250026', '3502040000250027', '3502040000250028', '3502040000250029', '3502040000250030', '3502040000250031', '3502040000250032', '3502040000250033', '3502040000250034', '3502040000250035', '3502040000250036', '3502040000250037', '3502040000250038', '3502040000250039', '3502040000250040', '3502040000250041', '3502040000250042', '3502040000250043', '3502040000250044', '3502040000250045', '3502040000250046', '3502040000250047', '3502040000250048', '3502040000250049', '3502040000250050', '3502040000250051', '3502040000250052', '3502040000250053', '3502040000250054', '3502040000250055', '3502040000250056', '3502040000250057', '3502040000250058', '3502040000250059', '3502040000250060', '3502040000250061', '3502040000260001', '3502040000260002', '3502040000260003', '3502040000260004', '3502040000260005', '3502040000260006', '3502040000260007', '3502040000260008', '3502040000260009', '3502040000260010', '3502040000260011', '3502040000260012', '3502040000260013', '3502040000260014', '3502040000260015', '3502040000260016', '3502040000260017', '3503010002590001', '3503010002590002', '3503010002590003', '3503010002590004', '3503010002590005', '3503010002590006', '3503010002590007', '3503010002590008', '3503010002590009', '3503010002590010', '3503010002590011', '3503010002590012', '3503010002590013', '3503010002590014', '3503010002590015', '3503010002590016', '3503010002590017', '3503010002590018', '3503010002590019', '3503010002590020', '3503010002600001', '3503010002600002', '3503010002600003', '3503010002600004', '3503010002600005', '3503010002600006', '3503010002600007', '3503010002600008', '3503010002600009', '3503010002600010', '3503010002600011', '3503010002600012', '3503010002600013', '3503010002600014', '3503010002600015', '3503010002600016', '3503010002600017', '3503010002600018', '3503010002600019', '3503010002600020', '3503010002600021', '3503010002600022', '3503010002600023', '3503010002600024', '3503010002600025', '3503010002600026', '3503010002600027', '3503010002610001', '3503010002610002', '3503010002610003', '3503010002610004', '3503010002610005', '3503010002610006', '3503010002610007', '3503010002610008', '3503010002610009', '3503010002610010', '3503010002610011', '3503010002610012', '3503010002610013', '3503010002610014', '3503010002610015', '3503010002610016', '3503010002610017', '3503010002610018', '3503010002610019', '3503010002610020', '3503010002610021', '3503010002620001', '3503010002620002', '3503010002620003', '3503010002620004', '3503010002620005', '3503010002620006', '3503010002620007', '3503010002620008', '3503010002620009', '3503010002620010', '3503010002620011', '3503010002620012', '3503010002620013', '3503010002620014', '3503010002620015', '3503010002620016', '3503010002620017', '3503010002620018', '3503010002620019', '3503010002620020', '3503010002620021', '3701010000510001', '3701010000520001', '3701010000530001', '3701010000540001', '3701010000550001',];        $spec_attrses = $goods_attr_model->getgoods_specsbyskus($skus, $lang);        $ex_hs_attrses = $goods_attr_model->getgoods_specsbyskus($skus, $lang);        foreach ($skus as $sku) {            //   $sku = $item['sku'];            $hs_attrs = $spec_attrs = null;            if (isset($spec_attrses[$sku])) {                $spec = json_encode($spec_attrses[$sku], 256);            }            if (isset($ex_hs_attrses[$sku])) {                $hs_attrs = json_encode($ex_hs_attrses[$sku], 256);            }            $where = ['sku' => $sku, 'lang' => $lang];            try {                if ($hs_attrs || $spec) {                    Log::append(MYPATH . '/logs/attr.sql', "update erui_goods.goods_attr set spec_attrs = '"                            . $spec . "',ex_hs_attrs='" . $hs_attrs . "' where sku = '"                            . $sku . "' and lang = '" . $lang . "';\r\n");                    $goods_attr_model->table('erui_goods.goods_attr')                            ->where($where)                            ->save(['spec_attrs' => $spec,                                'ex_hs_attrs' => $hs_attrs]);                }            } catch (Exception $ex) {                Log::write($sku);                Log::write($ex->getMessage());            }        }        echo 'OK', PHP_EOL;        ob_flush();        flush();        //}    }    /* 通过批量导入商品信息到ES     * @param string $lang // 语言     * @return mix     */    public function importgoodss($lang = 'en') {        try {            $count = $this->where(['lang' => $lang])->count('id');            for ($i = 0; $i < $count; $i += 100) {                if ($i > $count) {                    $i = $count;                }                echo $i, PHP_EOL;                ob_flush();                flush();                $goods = $this->where(['lang' => $lang])                                ->limit($i, 100)->select();                $spus = $skus = [];                if ($goods) {                    foreach ($goods as $item) {                        $skus[] = $item['sku'];                        $spus[] = $item['spu'];                    }                } else {                    return false;                }                $spus = array_unique($spus);                $skus = array_unique($skus);                $espoducmodel = new EsproductModel();                $es = new ESClient();                $productattrs = $espoducmodel->getproductattrsbyspus($spus, $lang);                $attachs = $this->getgoods_attachsbyskus($skus, $lang);                $goods_attrs = $this->getgoods_attrbyskus($skus, $lang);                $specs = $this->getgoods_specsbyskus($skus, $lang);                foreach ($goods as $item) {                    $id = $item['sku'];                    $this->_findnulltoempty($item);                    $body = $item;                    $body['meterial_cat'] = $productattrs[$item['spu']]['meterial_cat'];                    $body['show_cats'] = $productattrs[$item['spu']]['show_cats'];                    $product_attrs = json_decode($productattrs[$item['spu']]['attrs'], true);                    if (isset($specs[$item['sku']])) {                        $body['specs'] = json_encode($specs[$item['sku']], 256);                    } else {                        $body['specs'] = '[]';                    }                    if (isset($attachs[$item['sku']])) {                        $body['attachs'] = json_encode($attachs[$item['sku']], 256);                    } else {                        $body['attachs'] = '[]';                    }                    if (isset($goods_attrs[$item['sku']]) && $product_attrs) {                        foreach ($goods_attrs[$item['sku']] as $attr) {                            array_push($product_attrs, $attr);                        }                    } elseif (isset($goods_attrs[$item['sku']])) {                        $product_attrs = $goods_attrs[$item['sku']];                    }                    $body['attrs'] = json_encode($product_attrs, JSON_UNESCAPED_UNICODE);                    $body['supplier_name'] = $productattrs[$item['spu']]['supplier_name'];                    $body['brand'] = $productattrs[$item['spu']]['brand'];                    $body['source'] = $productattrs[$item['spu']]['source'];                    if ($body['source'] == 'ERUI') {                        $body['sort_order'] = 100;                    } else {                        $body['sort_order'] = 1;                    }                    if (in_array($body['brand'], ['KERUI', '科瑞'])) {                        $body['sort_order'] += 20;                    }                    $body['supplier_id'] = $productattrs[$item['spu']]['supplier_id'];                    $body['meterial_cat_no'] = $productattrs[$item['spu']]['meterial_cat_no'];                    $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);                    print_r($flag);                    ob_flush();                    flush();                }            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    public function getInsertCodition($condition, $lang = 'en') {        $data = [];        if (isset($condition['id'])) {            $data['id'] = $condition['id'];        }        $data['lang'] = $lang;        $meterial_cat_no = null;        if (isset($condition['spu'])) {            $data['spu'] = $condition['spu'];            $mpmodel = new Materialcatproduct();            $meterial_cat_noinfo = $mpmodel->getcatnobyspu($data['spu']);            $meterial_cat_no = $meterial_cat_noinfo['cat_no'];        } else {            $data['spu'] = '';        }        if (isset($condition['sku'])) {            $data['sku'] = $condition['sku'];        } else {            $data['sku'] = '';        }        if ($meterial_cat_no) {            $material_cat_no = $data['meterial_cat_no'] = $condition['meterial_cat_no'];            $mcatmodel = new MaterialcatModel();            $data['meterial_cat'] = json_encode($mcatmodel->getinfo($material_cat_no, $lang), 256);            $smmodel = new ShowmaterialcatModel();            $show_cat_nos = $smmodel->getshowcatnosBymatcatno($material_cat_no, $lang);            $es_product_model = new EsproductModel();            $scats = $es_product_model->getshow_cats($show_cat_nos, $lang);            $data['show_cats'] = json_encode($scats[$material_cat_no], 256);        } else {            $data['meterial_cat_no'] = '';            $data['meterial_cat'] = json_encode(new \stdClass());            $data['show_cats'] = json_encode([]);        }        if (isset($condition['qrcode'])) {            $data['qrcode'] = $condition['qrcode'];        } else {            $data['qrcode'] = '';        }        if (isset($condition['name'])) {            $data['name'] = $condition['name'];        } else {            $data['name'] = '';        }        if (isset($condition['show_name'])) {            $data['show_name'] = $condition['show_name'];        } else {            $data['show_name'] = '';        }        if (isset($condition['model'])) {            $data['model'] = $condition['model'];        } else {            $data['model'] = '';        }        if (isset($condition['description'])) {            $data['description'] = $condition['description'];        } else {            $data['description'] = '';        }        if (isset($condition['package_quantity'])) {            $data['package_quantity'] = $condition['package_quantity'];        } else {            $data['package_quantity'] = '';        }        if (isset($condition['exw_day'])) {            $data['exw_day'] = $condition['exw_day'];        } else {            $data['exw_day'] = '';        }        if (isset($condition['purchase_price1'])) {            $data['purchase_price1'] = $condition['purchase_price1'];        } else {            $data['purchase_price1'] = '';        }        if (isset($condition['purchase_price2'])) {            $data['purchase_price2'] = $condition['purchase_price2'];        } else {            $data['purchase_price2'] = '';        }        if (isset($condition['purchase_price_cur'])) {            $data['purchase_price_cur'] = $condition['purchase_price_cur'];        } else {            $data['purchase_price_cur'] = '';        }        if (isset($condition['purchase_unit'])) {            $data['purchase_unit'] = $condition['purchase_unit'];        } else {            $data['purchase_unit'] = '';        }        if (isset($condition['pricing_flag'])) {            $data['pricing_flag'] = $condition['pricing_flag'] == 'Y' ? 'Y' : 'N';        } else {            $data['pricing_flag'] = 'N';        }        if (isset($condition['status']) && in_array($condition['status'], ['VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {            $data['status'] = strtoupper($condition['status']);        } else {            $data['status'] = 'CHECKING';        }        if (isset($condition['created_by'])) {            $data['created_by'] = $condition['created_by'];        } else {            $data['created_by'] = '';        }        if (isset($condition['created_at'])) {            $data['created_at'] = $condition['created_at'];        } else {            $data['created_at'] = '';        }        if (isset($condition['supplier_id']) && $condition['supplier_id']) {            $data['supplier_id'] = $condition['supplier_id'];        } else {            $data['supplier_id'] = '';        }        if (isset($condition['supplier_name']) && $condition['supplier_name']) {            $data['supplier_name'] = $condition['supplier_name'];        } else {            $data['supplier_name'] = '';        }        if (isset($condition['brand'])) {            $data['brand'] = $condition['brand'];        } else {            $data['brand'] = '';        }        if (isset($condition['source'])) {            $data['source'] = $condition['source'];        } else {            $data['source'] = '';        }        return $data;    }    /*     * 添加产品到Es     * @param string $lang // 语言 zh en ru es     * @return mix     */    public function create_data($data, $lang = 'en') {        try {            $es = new ESClient();            if (!isset($data['sku']) || empty($data['sku'])) {                return false;            }            $body = $this->getInsertCodition($data);            $id = $data['sku'];            $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /*     * 添加产品到Es     * @param string $lang // 语言 zh en ru es     * @return mix     */    public function update_data($data, $sku, $lang = 'en') {        try {            $es = new ESClient();            if (empty($sku)) {                return false;            } else {                $data['sku'] = $sku;            }            $body = $this->getInsertCodition($data);            $id = $sku;            $flag = $es->add_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /* 上架     *     */    public function changestatus($sku, $lang = 'en') {        try {            $es = new ESClient();            if (empty($sku)) {                return false;            }            if (in_array(strtoupper($status), ['VALID', 'TEST', 'CHECKING', 'CLOSED', 'DELETED'])) {                $data['status'] = strtoupper($status);            } else {                $data['status'] = 'CHECKING';            }            $id = $sku;            $flag = $es->update_document($this->dbName, $this->tableName . '_' . $lang, $body, $id);            if ($flag['_shards']['successful'] !== 1) {                LOG::write("FAIL:" . $id . var_export($flag, true), LOG::ERR);                return true;            } else {                return false;            }        } catch (Exception $ex) {            LOG::write('CLASS' . __CLASS__ . PHP_EOL . ' LINE:' . __LINE__, LOG::EMERG);            LOG::write($ex->getMessage(), LOG::ERR);            return false;        }    }    /* 更新属性规格     *     */    public function Update_Attrs($sku, $lang = 'en', $product_attrs = [], $product_specs = []) {        $es = new ESClient();        if (empty($sku)) {            return false;        }        $goodsmodel = new GoodsModel();        $goodsinfo = $goodsmodel->getInfo($sku, $lang);        $goods_attrs = $this->getgoods_attrbyskus([$sku], $lang);        $specs = $this->getgoods_specsbyskus([$sku], $lang);        $EsproductModel = new EsproductModel();        if (empty($product_attrs)) {            $product_attrs = $EsproductModel->getgoods_specsbyspus([$goodsinfo['spu']], $lang);        }        if (empty($product_specs)) {            $product_specs = $EsproductModel->getproductattrsbyspus([$goodsinfo['spu']], $lang);        }        $goods_attrs = $goods_attrs[$sku];        $specs = $specs[$sku];        if (isset($specs[$item['sku']])) {            $body['specs'] = json_encode($specs[$item['sku']], 256);        } else {            $body['specs'] = '[]';        }        if (isset($product_attrs[$goodsinfo['spu']]) && $goods_attrs) {            foreach ($product_attrs[$goodsinfo['spu']] as $attr) {                array_push($goods_attrs, $attr);            }        } elseif (isset($product_attrs[$goodsinfo['spu']])) {            $goods_attrs = $product_attrs[$goodsinfo['spu']];        }        if (isset($product_specs[$goodsinfo['spu']]) && $specs) {            foreach ($product_specs[$goodsinfo['spu']] as $spec) {                array_push($specs, $spec);            }        } elseif (isset($product_specs[$goodsinfo['spu']])) {            $specs = $product_specs[$goodsinfo['spu']];        }        $data['attrs'] = json_encode($goods_attrs, JSON_UNESCAPED_UNICODE);        $id = $sku;        $data['specs'] = json_encode($specs, 256);        $type = $this->tableName . '_' . $lang;        $es->update_document($this->dbName, $type, $data, $id);        return true;    }    /* 新增ES     *     */    public function Update_Attachs($sku, $lang = 'en') {        $es = new ESClient();        if (empty($spu)) {            return false;        }        $attachs = $this->getgoods_attachsbyskus([$sku], $lang);        if (isset($attachs[$sku])) {            $data['attachs'] = json_encode($attachs[$sku], 256);        } else {            $data['attachs'] = '[]';        }        $id = $spu;        $type = $this->tableName . '_' . $lang;        $es->update_document($this->dbName, $type, $data, $id);        return true;    }    public function delete_data($sku, $lang = 'en') {        $es = new ESClient();        if (empty($sku)) {            return false;        }        $data['status'] = self::STATUS_DELETED;        $id = $sku;        $type = $this->tableName . '_' . $lang;        $flag = $es->update_document($this->dbName, $type, $data, $id);        return true;    }}